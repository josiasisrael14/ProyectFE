// <auto-generated />
using System;
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ProyectDbContext))]
    partial class ProyectDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Box", b =>
                {
                    b.Property<int>("IdBox")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBox"));

                    b.Property<string>("BarCode")
                        .HasColumnType("varchar(40)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("State")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("TradeMark")
                        .HasColumnType("varchar(60)");

                    b.HasKey("IdBox");

                    b.ToTable("Boxes");
                });

            modelBuilder.Entity("Domain.BoxOpening", b =>
                {
                    b.Property<int>("IdBoxOpening")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBoxOpening"));

                    b.Property<string>("BoxState")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("CloseAmount")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("ClosingDate")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("CurrentAmount")
                        .HasColumnType("varchar(60)");

                    b.Property<int>("IdBox")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<string>("OpenDate")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("OpeningAmount")
                        .HasColumnType("varchar(60)");

                    b.HasKey("IdBoxOpening");

                    b.HasIndex("IdBox");

                    b.HasIndex("IdUser");

                    b.ToTable("BoxOpenings");
                });

            modelBuilder.Entity("Domain.BranchOffice", b =>
                {
                    b.Property<int>("IdBranchOffice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBranchOffice"));

                    b.Property<int>("IdCompany")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("varchar(1)");

                    b.HasKey("IdBranchOffice");

                    b.HasIndex("IdCompany");

                    b.ToTable("BranchOffices");
                });

            modelBuilder.Entity("Domain.CategoryProduct", b =>
                {
                    b.Property<int>("IdProductCategory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProductCategory"));

                    b.HasKey("IdProductCategory");

                    b.ToTable("CategoryProducts");
                });

            modelBuilder.Entity("Domain.Client", b =>
                {
                    b.Property<int>("IdClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdClient"));

                    b.Property<string>("DirectionClient")
                        .HasColumnType("varchar(80)");

                    b.Property<string>("DniRucClient")
                        .HasColumnType("varchar(25)");

                    b.Property<int>("IdBranchOffice")
                        .HasColumnType("int");

                    b.Property<int?>("IdTypeClient")
                        .HasColumnType("int");

                    b.Property<string>("NameClient")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("State")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("TelephoneClient")
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdClient");

                    b.HasIndex("IdBranchOffice");

                    b.HasIndex("IdTypeClient");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Domain.Company", b =>
                {
                    b.Property<int>("IdCompany")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCompany"));

                    b.Property<string>("NameCompany")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("State")
                        .HasColumnType("varchar(1)");

                    b.HasKey("IdCompany");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Domain.Conversion", b =>
                {
                    b.Property<int>("IdConversion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdConversion"));

                    b.Property<int>("Factor")
                        .HasColumnType("int");

                    b.Property<int>("IdFinalProduct")
                        .HasColumnType("int");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int");

                    b.HasKey("IdConversion");

                    b.HasIndex("IdFinalProduct");

                    b.HasIndex("IdUser");

                    b.ToTable("Conversion");
                });

            modelBuilder.Entity("Domain.DetailConversion", b =>
                {
                    b.Property<int>("IdDetailConversions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDetailConversions"));

                    b.Property<int?>("Factor")
                        .HasColumnType("int");

                    b.Property<int>("IdConversion")
                        .HasColumnType("int");

                    b.Property<int?>("SubTotal")
                        .HasColumnType("int");

                    b.Property<int?>("amount")
                        .HasColumnType("int");

                    b.HasKey("IdDetailConversions");

                    b.HasIndex("IdConversion");

                    b.ToTable("DetailConversions");
                });

            modelBuilder.Entity("Domain.DetailShopping", b =>
                {
                    b.Property<int>("IdDetailShopping")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDetailShopping"));

                    b.Property<int>("IdFinalProduct")
                        .HasColumnType("int");

                    b.Property<int?>("IdPurchase")
                        .HasColumnType("int");

                    b.HasKey("IdDetailShopping");

                    b.HasIndex("IdFinalProduct");

                    b.HasIndex("IdPurchase");

                    b.ToTable("DetailShopping");
                });

            modelBuilder.Entity("Domain.DocumentType", b =>
                {
                    b.Property<int>("IdDocumentType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDocumentType"));

                    b.Property<string>("CodSunat")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("EsSunat")
                        .HasColumnType("varchar(60)");

                    b.HasKey("IdDocumentType");

                    b.ToTable("DocumentType");
                });

            modelBuilder.Entity("Domain.FinalProduct", b =>
                {
                    b.Property<int>("IdFinalProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdFinalProduct"));

                    b.Property<string>("FinalProductscol")
                        .HasColumnType("varchar(60)");

                    b.Property<int>("IdBranchOffice")
                        .HasColumnType("int");

                    b.Property<int>("IdPresentation")
                        .HasColumnType("int");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int");

                    b.Property<int>("IdUnit")
                        .HasColumnType("int");

                    b.Property<string>("PurchasePrice")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("SalePrice")
                        .HasColumnType("varchar(60)");

                    b.Property<int?>("Stock")
                        .HasColumnType("int");

                    b.HasKey("IdFinalProduct");

                    b.HasIndex("IdBranchOffice");

                    b.HasIndex("IdPresentation");

                    b.HasIndex("IdProduct");

                    b.HasIndex("IdUnit");

                    b.ToTable("FinalProducts");
                });

            modelBuilder.Entity("Domain.Kardex", b =>
                {
                    b.Property<int>("idKardex")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idKardex"));

                    b.Property<int>("IdFinalProduct")
                        .HasColumnType("int");

                    b.Property<string>("IdTypeTransaccion")
                        .HasColumnType("varchar(60)");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int");

                    b.Property<int>("idTypeMovement")
                        .HasColumnType("int");

                    b.HasKey("idKardex");

                    b.HasIndex("IdFinalProduct");

                    b.HasIndex("IdUser");

                    b.HasIndex("idTypeMovement");

                    b.ToTable("Kardex");
                });

            modelBuilder.Entity("Domain.MovementType", b =>
                {
                    b.Property<int>("IdTypeMovement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTypeMovement"));

                    b.HasKey("IdTypeMovement");

                    b.ToTable("MovementType");
                });

            modelBuilder.Entity("Domain.Movementbox", b =>
                {
                    b.Property<int>("IdMovementbox")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMovementbox"));

                    b.Property<string>("Amount")
                        .HasColumnType("varchar(60)");

                    b.Property<int>("IdBoxOpening")
                        .HasColumnType("int");

                    b.Property<int>("IdTypeMovement")
                        .HasColumnType("int");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int");

                    b.HasKey("IdMovementbox");

                    b.HasIndex("IdBoxOpening");

                    b.HasIndex("IdTypeMovement");

                    b.HasIndex("IdUser");

                    b.ToTable("Movementbox");
                });

            modelBuilder.Entity("Domain.Payment", b =>
                {
                    b.Property<int>("IdPayment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPayment"));

                    b.Property<int>("IdSchedule")
                        .HasColumnType("int");

                    b.Property<string>("PaymentAmount")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("PaymentDate")
                        .HasColumnType("varchar(60)");

                    b.HasKey("IdPayment");

                    b.HasIndex("IdSchedule");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Domain.PaymentType", b =>
                {
                    b.Property<int>("IdPaymentType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPaymentType"));

                    b.HasKey("IdPaymentType");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("Domain.Presentation", b =>
                {
                    b.Property<int>("IdPresentation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPresentation"));

                    b.HasKey("IdPresentation");

                    b.ToTable("Presentations");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.Property<int>("IdProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProduct"));

                    b.Property<int>("IdProductCategory")
                        .HasColumnType("int");

                    b.Property<string>("Price")
                        .HasColumnType("varchar(60)");

                    b.HasKey("IdProduct");

                    b.HasIndex("IdProductCategory");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Domain.Provider", b =>
                {
                    b.Property<int>("IdProvider")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProvider"));

                    b.Property<int>("IdCompany")
                        .HasColumnType("int");

                    b.HasKey("IdProvider");

                    b.HasIndex("IdCompany");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("Domain.Role", b =>
                {
                    b.Property<int>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRole"));

                    b.HasKey("IdRole");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Domain.Sale", b =>
                {
                    b.Property<int>("IdSale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSale"));

                    b.Property<int>("IdBox")
                        .HasColumnType("int");

                    b.Property<int>("IdClient")
                        .HasColumnType("int");

                    b.Property<int>("IdDocumentType")
                        .HasColumnType("int");

                    b.Property<int>("IdPaymentType")
                        .HasColumnType("int");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int");

                    b.HasKey("IdSale");

                    b.HasIndex("IdBox");

                    b.HasIndex("IdClient");

                    b.HasIndex("IdDocumentType");

                    b.HasIndex("IdPaymentType");

                    b.HasIndex("IdUser");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("Domain.SaleDetail", b =>
                {
                    b.Property<int>("IdSaleDetail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSaleDetail"));

                    b.Property<string>("Amount")
                        .HasColumnType("varchar(60)");

                    b.Property<int>("IdFinalProduct")
                        .HasColumnType("int");

                    b.Property<int?>("IdSale")
                        .HasColumnType("int");

                    b.Property<string>("SalePrice")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("SubTotal")
                        .HasColumnType("varchar(60)");

                    b.HasKey("IdSaleDetail");

                    b.HasIndex("IdFinalProduct");

                    b.HasIndex("IdSale");

                    b.ToTable("SalesDetail");
                });

            modelBuilder.Entity("Domain.Schedule", b =>
                {
                    b.Property<int>("IdSchedule")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdSchedule"));

                    b.Property<string>("AmountPaid")
                        .HasColumnType("varchar(60)");

                    b.Property<int>("IdSale")
                        .HasColumnType("int");

                    b.Property<string>("PaymentDate")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("QuotaAmount")
                        .HasColumnType("varchar(60)");

                    b.HasKey("IdSchedule");

                    b.HasIndex("IdSale");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("Domain.Shopping", b =>
                {
                    b.Property<int>("IdPurchase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdPurchase"));

                    b.Property<int>("IdDocumentType")
                        .HasColumnType("int");

                    b.Property<int>("IdProvider")
                        .HasColumnType("int");

                    b.Property<int?>("IdUser")
                        .HasColumnType("int");

                    b.HasKey("IdPurchase");

                    b.HasIndex("IdDocumentType");

                    b.HasIndex("IdProvider");

                    b.HasIndex("IdUser");

                    b.ToTable("Shopping");
                });

            modelBuilder.Entity("Domain.TransactionType", b =>
                {
                    b.Property<int>("IdTransactionType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTransactionType"));

                    b.HasKey("IdTransactionType");

                    b.ToTable("TransactionType");
                });

            modelBuilder.Entity("Domain.TypeClient", b =>
                {
                    b.Property<int>("IdTypeClient")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTypeClient"));

                    b.Property<string>("NameTypeClient")
                        .HasColumnType("varchar(200)");

                    b.HasKey("IdTypeClient");

                    b.ToTable("TypeClients");
                });

            modelBuilder.Entity("Domain.Unit", b =>
                {
                    b.Property<int>("IdUnit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUnit"));

                    b.Property<int>("MeasureActive")
                        .HasColumnType("int");

                    b.Property<string>("MeasureCodeUnit")
                        .IsRequired()
                        .HasColumnType("varchar(100)");

                    b.Property<string>("MeasureName")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdUnit");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"));

                    b.Property<int>("IdBranchOffice")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("varchar(1)");

                    b.Property<string>("Username")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Userpass")
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdUser");

                    b.HasIndex("IdBranchOffice");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.UserRole", b =>
                {
                    b.Property<int>("IdUserRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUserRole"));

                    b.Property<int>("IdRole")
                        .HasColumnType("int");

                    b.Property<int>("IdUser")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .HasColumnType("varchar(1)");

                    b.HasKey("IdUserRole");

                    b.HasIndex("IdRole");

                    b.HasIndex("IdUser");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Domain.BoxOpening", b =>
                {
                    b.HasOne("Domain.Box", "DBox")
                        .WithMany()
                        .HasForeignKey("IdBox")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "DUser")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DBox");

                    b.Navigation("DUser");
                });

            modelBuilder.Entity("Domain.BranchOffice", b =>
                {
                    b.HasOne("Domain.Company", "DCompany")
                        .WithMany()
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DCompany");
                });

            modelBuilder.Entity("Domain.Client", b =>
                {
                    b.HasOne("Domain.BranchOffice", "BranchOffice")
                        .WithMany()
                        .HasForeignKey("IdBranchOffice")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.TypeClient", "TypeClient")
                        .WithMany()
                        .HasForeignKey("IdTypeClient");

                    b.Navigation("BranchOffice");

                    b.Navigation("TypeClient");
                });

            modelBuilder.Entity("Domain.Conversion", b =>
                {
                    b.HasOne("Domain.FinalProduct", "DFinalProduct")
                        .WithMany()
                        .HasForeignKey("IdFinalProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "DUser")
                        .WithMany()
                        .HasForeignKey("IdUser");

                    b.Navigation("DFinalProduct");

                    b.Navigation("DUser");
                });

            modelBuilder.Entity("Domain.DetailConversion", b =>
                {
                    b.HasOne("Domain.Conversion", "DConversion")
                        .WithMany()
                        .HasForeignKey("IdConversion")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DConversion");
                });

            modelBuilder.Entity("Domain.DetailShopping", b =>
                {
                    b.HasOne("Domain.FinalProduct", "DFinalProduct")
                        .WithMany()
                        .HasForeignKey("IdFinalProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Shopping", "DShopping")
                        .WithMany()
                        .HasForeignKey("IdPurchase");

                    b.Navigation("DFinalProduct");

                    b.Navigation("DShopping");
                });

            modelBuilder.Entity("Domain.FinalProduct", b =>
                {
                    b.HasOne("Domain.BranchOffice", "DBranchOffice")
                        .WithMany()
                        .HasForeignKey("IdBranchOffice")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Presentation", "DPresentation")
                        .WithMany()
                        .HasForeignKey("IdPresentation")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Product", "DProduct")
                        .WithMany()
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Unit", "DUnit")
                        .WithMany()
                        .HasForeignKey("IdUnit")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DBranchOffice");

                    b.Navigation("DPresentation");

                    b.Navigation("DProduct");

                    b.Navigation("DUnit");
                });

            modelBuilder.Entity("Domain.Kardex", b =>
                {
                    b.HasOne("Domain.FinalProduct", "DFinalProduct")
                        .WithMany()
                        .HasForeignKey("IdFinalProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "DUser")
                        .WithMany()
                        .HasForeignKey("IdUser");

                    b.HasOne("Domain.MovementType", "DMovementType")
                        .WithMany()
                        .HasForeignKey("idTypeMovement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DFinalProduct");

                    b.Navigation("DMovementType");

                    b.Navigation("DUser");
                });

            modelBuilder.Entity("Domain.Movementbox", b =>
                {
                    b.HasOne("Domain.BoxOpening", "DBoxOpening")
                        .WithMany()
                        .HasForeignKey("IdBoxOpening")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.MovementType", "DMovementType")
                        .WithMany()
                        .HasForeignKey("IdTypeMovement")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "DUser")
                        .WithMany()
                        .HasForeignKey("IdUser");

                    b.Navigation("DBoxOpening");

                    b.Navigation("DMovementType");

                    b.Navigation("DUser");
                });

            modelBuilder.Entity("Domain.Payment", b =>
                {
                    b.HasOne("Domain.Schedule", "DSchedule")
                        .WithMany()
                        .HasForeignKey("IdSchedule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DSchedule");
                });

            modelBuilder.Entity("Domain.Product", b =>
                {
                    b.HasOne("Domain.CategoryProduct", "DCategoryProduct")
                        .WithMany()
                        .HasForeignKey("IdProductCategory")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DCategoryProduct");
                });

            modelBuilder.Entity("Domain.Provider", b =>
                {
                    b.HasOne("Domain.Company", "DCompany")
                        .WithMany()
                        .HasForeignKey("IdCompany")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DCompany");
                });

            modelBuilder.Entity("Domain.Sale", b =>
                {
                    b.HasOne("Domain.Box", "DBox")
                        .WithMany()
                        .HasForeignKey("IdBox")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Client", "DClient")
                        .WithMany()
                        .HasForeignKey("IdClient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.DocumentType", "DDocumentType")
                        .WithMany()
                        .HasForeignKey("IdDocumentType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.PaymentType", "DPaymentType")
                        .WithMany()
                        .HasForeignKey("IdPaymentType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "DUser")
                        .WithMany()
                        .HasForeignKey("IdUser");

                    b.Navigation("DBox");

                    b.Navigation("DClient");

                    b.Navigation("DDocumentType");

                    b.Navigation("DPaymentType");

                    b.Navigation("DUser");
                });

            modelBuilder.Entity("Domain.SaleDetail", b =>
                {
                    b.HasOne("Domain.FinalProduct", "DFinalProduct")
                        .WithMany()
                        .HasForeignKey("IdFinalProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Sale", "DSale")
                        .WithMany()
                        .HasForeignKey("IdSale");

                    b.Navigation("DFinalProduct");

                    b.Navigation("DSale");
                });

            modelBuilder.Entity("Domain.Schedule", b =>
                {
                    b.HasOne("Domain.Sale", "DSale")
                        .WithMany()
                        .HasForeignKey("IdSale")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DSale");
                });

            modelBuilder.Entity("Domain.Shopping", b =>
                {
                    b.HasOne("Domain.DocumentType", "DDocumentType")
                        .WithMany()
                        .HasForeignKey("IdDocumentType")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Provider", "DProvider")
                        .WithMany()
                        .HasForeignKey("IdProvider")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "DUser")
                        .WithMany()
                        .HasForeignKey("IdUser");

                    b.Navigation("DDocumentType");

                    b.Navigation("DProvider");

                    b.Navigation("DUser");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.HasOne("Domain.BranchOffice", "DBranchOffice")
                        .WithMany()
                        .HasForeignKey("IdBranchOffice")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DBranchOffice");
                });

            modelBuilder.Entity("Domain.UserRole", b =>
                {
                    b.HasOne("Domain.Role", "DRole")
                        .WithMany()
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.User", "DUser")
                        .WithMany()
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DRole");

                    b.Navigation("DUser");
                });
#pragma warning restore 612, 618
        }
    }
}
